{"version":3,"sources":["doctors.js"],"names":[],"mappings":";;;;;AAGA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,eAAe,QAAQ,MAAR,EAAnB;;AAEA,IAAI,OAAO,QAAQ,GAAR,KAAgB,QAA3B;AACA,IAAI,MAAM,QAAQ,OAAO,KAAf,EAAsB,MAAtB,CAAV;;AAEA,IAAI,KAAK,QAAQ,OAAO,aAAf,CAAT;AACA,IAAI,SAAS,QAAQ,OAAO,cAAf,CAAb;;AAEA,aAAa,IAAb,CAAkB,GAAlB,EAAuB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACvC,QAAI,SAAS,IAAI,MAAJ,CAAW;AACpB,mBAAW,IAAI,IAAJ,CAAS,SADA;AAEpB,kBAAU,IAAI,IAAJ,CAAS,QAFC;AAGpB,oBAAY,IAAI,IAAJ,CAAS,UAHD;AAIpB,sBAAc,IAAI,IAAJ,CAAS,YAJH;AAKpB,kBAAU,IAAI,IAAJ,CAAS,QALC;AAMpB,eAAO,IAAI,IAAJ,CAAS,KANI;AAOpB,eAAO,IAAI,IAAJ,CAAS,KAPI;AAQpB,kBAAU,IAAI,IAAJ,CAAS;AARC,KAAX,CAAb;AAUA,WAAO,IAAP,CAAY,UAAU,GAAV,EAAe;AACvB,YAAI,KAAJ,CAAU,MAAV;AACA,YAAI,CAAC,GAAL,EAAU;AACN,gBAAI,IAAJ,CAAS,EAAC,QAAQ,IAAT,EAAe,QAAQ,MAAvB,EAAT;AACH,SAFD,MAEO;AACH,gBAAI,UAAJ,GAAiB,GAAjB;AACA,gBAAI,IAAJ,CAAS,EAAC,OAAO,cAAR,EAAT;AACH;AACJ,KARD;AASH,CApBD;;AAsBA,aAAa,IAAb,CAAkB,QAAlB,EAA4B,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AACvD,qBAAiB,GADsC;AAEvD,qBAAiB,MAFsC;AAGvD,kBAAc;AAHyC,CAA/B,CAA5B,EAII,UAAU,GAAV,EAAe,GAAf,EAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCpB,WAAO,IAAI,IAAJ,CAAS,EAAC,QAAQ,IAAT,EAAT,CAAP;AACH,CA3CD;;AA6CA,OAAO,OAAP,GAAiB,YAAjB","file":"doctors-compiled.js","sourcesContent":["/**\r\n * Created by AsTex on 28.06.2016.\r\n */\r\nvar express = require('express');\r\nvar crypto = require('crypto');\r\nvar passport = require('passport');\r\nvar doctorRouter = express.Router();\r\n\r\nvar libs = process.cwd() + '/libs/';\r\nvar log = require(libs + 'log')(module);\r\n\r\nvar db = require(libs + 'db/mongoose');\r\nvar Doctor = require(libs + 'model/doctor');\r\n\r\ndoctorRouter.post('/', function (req, res) {\r\n    var doctor = new Doctor({\r\n        firstName: req.body.firstName,\r\n        lastName: req.body.lastName,\r\n        secondName: req.body.secondName,\r\n        organisation: req.body.organisation,\r\n        position: req.body.position,\r\n        phone: req.body.phone,\r\n        email: req.body.email,\r\n        password: req.body.password\r\n    });\r\n    doctor.save(function (err) {\r\n        log.error(doctor);\r\n        if (!err) {\r\n            res.send({status: 'OK', doctor: doctor});\r\n        } else {\r\n            res.statusCode = 500;\r\n            res.send({error: 'Server Error'});\r\n        }\r\n    });\r\n});\r\n\r\ndoctorRouter.post('/login', passport.authenticate('local', {\r\n    successRedirect: '/',\r\n    failureRedirect: '/log',\r\n    failureFlash: true\r\n}), function (req, res) {\r\n    \r\n    /*\r\n     if(res.cookies && res.cookies.sessionId) {\r\n     res.statusCode = 401;\r\n     res.send({error:'Server error'});\r\n     }else{\r\n     if (!req.body.email || !req.body.password) {\r\n     return res.send({error: 'Incorrect credentials'});\r\n     }\r\n     Doctor.findOne({email: req.body.email}, function (err, doctor) {\r\n     log.debug('test');\r\n     if (err) {\r\n     res.statusCode = 401;\r\n     res.send({error: 'Server Error'});\r\n     }\r\n     if (!doctor) {\r\n     res.statusCode = 401;\r\n     return res.send({error: 'Incorrect username'});\r\n     }\r\n     if (!doctor.checkPassword(req.body.password)) {\r\n     return res.send({error: 'Incorrect password'});\r\n     }\r\n     var sessionId =  crypto.randomBytes(16).toString('hex');\r\n     Doctor.findByIdAndUpdate(doctor._id, {$set: {'sessionId': sessionId}}).exec(function(err){\r\n     if(!err){\r\n     res.cookie('session', doctor.sessionId);\r\n     return res.send({status:'OK'});\r\n     } else{\r\n     res.statusCode = 500;\r\n     return res.send({error: 'Server error'});\r\n     }\r\n     });\r\n\r\n     });\r\n     }\r\n     */\r\n\r\n    return res.send({status: 'OK'});\r\n});\r\n\r\nmodule.exports = doctorRouter;"]}